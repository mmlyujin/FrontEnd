------------JAVA--------------

전역 = static 공유
public static void main(){}



반복문
－동일한　작업을　반복하는　것．
－반복하는　중에　다시　반복도　가능．
－무한대로　반복하는　것도　가능（주로　의도치않게　오류로　만들어짐

－ｆｏｒ，ｗｈｉｌｅ，　ｄｏ－ｗｈｉｌｅ


ｆｏｒ（1 = 초기값，2 = 조건식，4 = 증강식）（
3 = 반복될　내용
）

ｗｈｉｌｅ（조건）｛／／ｉｆ＋반복
				반복될　내용
｝


ｄｏ｛／／조건이　맞지　않더라도　무조건　１번은　실행된다．
　반복될　내용

｝ｗｈｉｌｅ（조건）

오버라이딩 - 원래 있던(상속받아서 내부적으로 가지고 있던) 메서드의 내용을 재정의 하는것

오버 로딩 - 메서드 이름이 같지만 타입이나,개수,순서를 다르게 해서 같은 이름으로 사용


클래스 
정보+기능
정보 => 값 => 클래스 변수


메서드
기능 => 값을 가지고 하는 행위 => 메서드
내정보를 보여주거나->호출한 다른 객체에게 돌려준다(보내준다)
외부의 정보를 가져와서 내정보와 혼합해서 사용

=> 반드시 메서드가 필요한건 아니다. 하지만 제어가 들어간다면 필수!
=> if, for, 산술연산...
=> 보안때문에...

클래스 {
	고객이 입력하는 것이 무엇인지 파악 - 고객한테 입력할 내용을 강제함
	고객이 입력한 내용을 담아 둘 변수
	고객이 원하는 기능을 실행


	main메서드{
		고객이 사용하는곳
		고객이 x y int 이런거 모른다.
		만약 계산기라면
		고객은 숫자 ,기호(+,-,=)이후에 끝
	}
}

<카멜표기법> - 왠만하면 다 이 형식. 자바문법에서 권장하는 방법
	     단어가 2개이상 합쳐질 경우 각 단어의 첫자는 대문자로-클래스제외

클래스는 - 첫글자 대문자 HelloWorld
메서드는 - 첫글자 소문자 getText()
변수는 - 첫글자 소문자 intBox
상수는 - 전체 대문자 MAX

<파스칼 표기법> - 자바의 클래스
무조건 첫글자는 대문자로
두번째 단어역시 첫글자는 대문자

<스네이크 표기법> - c++에서 권장함
전부 소문자로 작성하되 2개이상의 단어가 연결된다면 각 단어 사이에 _(언더바)를 넣는다.
ex)hello_world

헝가리안 표기법-거의 안쓴다.
타입의 줄임말을 변수 앞에 붙임.

	//접근제어자
			//public, private, default, protected
			//누가 이 생성자,클래스,메소드 등 외부로부터 사용 가능한 녀석들에 대한 접근 설정
			//public = 공용 ,private = 나만, default = (안쓰면 default) 같은 폴더안에서
			//protected =>상속 받은 경우 
		}
		
		//메서드 
		//[접근제어자]반환형 메서드이름(매개변수) {
		//		반환형이 void가 아니라면 return이 필수.
		//}
		//메서드 이름은 내 마음대로. 다만 묵시적으로 값을 외부로부터 받아와서 내 정보(변수)를 바꾸는 기능이라면 set으로 시작 set()->값을 꼭 넣는다.
		//내 정보를 외부로 보내야(return)하는 메서드일 경우 get으로 시작 get()->값을 넣지 않는다.	
		
		//메서드와 생성자의 차이점 
		//생성자도 일종의 메서드이다. =>형태가 유사하다. 메서드에는 반환형이 있지만 생성자에는 없다.




클래스 3개
제품,사용자,주문
제품- 제품명,가격,무게,재고///메서드 -> 재고개수 가감,전체내용출력

사용자-아이디,이름,주소,전화번호///전체내용 출력

주문-제품,사용자,개수,금액///사용자 아이디로 구매한 제품 출력, 
			전체사용자출력-사용자입력(new사용자)
			전체제품 출력 - 제품입력(new제품)



int double char String 
double total = height + size;

실수 >정수
정수 + 실수 => 실수 
정수/정수 => 정수
실수/정수 => 실수 
10==9   =>false 

a 10보다 크고 20보다 작다. => 10<a &&(and) 20>a (O)

부등호가 항상 먼저 나온다. &&(and) ||(or)

int[] n = {1,2,3,4,5};
int[] n = {0}
int n[] = new int[3];//변수 선언은 배열임을 확인하면 된다.
int n[3] = new int[3]; ->X//생성할 때 몇개로 만들껀지 쓴다. 

int a[] = new int[100];

마지막 번호 = >99번

a.length - >100;//크기

int[100] = 50; <==100번이 없으므로 에러

int[][]a =new int[행][열]

for(int i=0,i<10,i++){
}
int a[] = new int[10]

for(int i : a){// for each문
}

자바에서는 객체를 생성하고 나면 가상머신이 관리합니다.
=> 가비지 컬렉션이 객체가 생성이 되면 관리해서 필요없을 때 날린다.
=> 클래스는 인스턴스를 생성(new)를 하기 위해서 사용하는 틀이다.
=> 클래스 소속의 변수 => 필드, 클래스는 필드+메서드 

=>접근제어자에서 내부에서만 사용하는 필드의 경우 private

생성자
가상머신이 빈 생성자 하나 만들어준다.
이름 ==클래스();
this() <= 내 생성자 중에서 찾기

public box{
int x;
    box(){
     return 1;//쓸일은 없지만 문법적으로는 가능
  }
   box(int i){
      this.x=i;

      this();	
  }
}

Book[] b = new Book[10];//배열은 변수의 묶음이다. => 변수에 값을 자동으로 넣어주는게 아님.
//book을 담을 수 있는 객체가 10개 생성된거다.(new는 틀만 만드는 것)
//book이 10개 만들어진게 아니다.

this() 사용했을 때 이점 : 코드 줄일려고->코드 중복제거


JSON ->키:값 이루어진 맵 형태의 타입 ex) {"city :{"seoul" : "맑음", "busan": "흐림"}}

JSONObject json = new JSONObject();
json.put("seoul","맑음");//object, object 
json.put("busan","흐림");//object, object

JSONObject json2 = new JSONObject();
json2.put("city",json);

Java Archive = xxx.jar =>압축풀면 xxx.class  듬뿍 들어있음

=>보관소 =>압축파일 


1.자바
-interface
 - 파일이름
 - 메소드이름
   add(),sub(),mul() div()
 - 변수이름
   x,y,z ->num1,num2,num3

2.implements : 이름

3.main 메소드 : 이름 




